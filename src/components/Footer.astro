---
import Container from "@components/Container.astro";
import { SITE } from "@consts";
import BackToTop from "@components/BackToTop.astro";
---

<footer class="animate">
  <Container>
    <div class="relative">
    </div>
    <div class="flex justify-between items-center">
      <div>
        &copy; 2024 {`|`} {SITE.NAME}
      </div>
      <div class="flex flex-wrap gap-1 items-center">
        <button
          id="light-theme-button"
          aria-label="Light theme"
          class="group size-8 flex items-center justify-center rounded-full"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="group-hover:stroke-black group-hover:dark:stroke-white transition-colors duration-300 ease-in-out"
          >
            <circle cx="12" cy="12" r="5"></circle>
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
          </svg>
        </button>
        <button
          id="dark-theme-button"
          aria-label="Dark theme"
          class="group size-8 flex items-center justify-center rounded-full"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="group-hover:stroke-black group-hover:dark:stroke-white transition-colors duration-300 ease-in-out"
          >
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
          </svg>
        </button>
        <button
          id="system-theme-button"
          aria-label="System theme"
          class="group size-8 flex items-center justify-center rounded-full"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="group-hover:stroke-black group-hover:dark:stroke-white transition-colors duration-300 ease-in-out"
          >
            <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
            <line x1="8" y1="21" x2="16" y2="21"></line>
            <line x1="12" y1="17" x2="12" y2="21"></line>
          </svg>
        </button>
      </div>
    </div>
  </Container>

  <script lang="ts">
    (function () {
      const LS_KEY = 'theme';
      const html = document.documentElement;
      const btnLight = document.getElementById('light-theme-button');
      const btnDark = document.getElementById('dark-theme-button');
      const btnSystem = document.getElementById('system-theme-button');

      const applyTheme = (theme: 'light'|'dark'|'system'): void => {
        if (theme === 'light') {
          html.classList.remove('dark');
        } else if (theme === 'dark') {
          html.classList.add('dark');
        } else {
          // system
          const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
          if (prefersDark) html.classList.add('dark'); else html.classList.remove('dark');
        }
        // highlight active button
        [btnLight, btnDark, btnSystem].forEach(b => b && b.classList.remove('ring-2', 'ring-black/10', 'dark:ring-white/20'));
        if (theme === 'light' && btnLight) btnLight.classList.add('ring-2','ring-black/10');
        if (theme === 'dark' && btnDark) btnDark.classList.add('ring-2','ring-black/10','dark:ring-white/20');
        if (theme === 'system' && btnSystem) btnSystem.classList.add('ring-2','ring-black/10');
      };

      const setTheme = (theme: 'light'|'dark'|'system'): void => {
        try { localStorage.setItem(LS_KEY, theme); } catch (e) {}
        applyTheme(theme);
      };

      // init
      const stored = (() => { try { return localStorage.getItem(LS_KEY); } catch (e) { return null; }})();
      const initial = (stored as ('light'|'dark'|'system') | null) || 'system';
      applyTheme(initial);

      btnLight && btnLight.addEventListener('click', () => setTheme('light'));
      btnDark && btnDark.addEventListener('click', () => setTheme('dark'));
      btnSystem && btnSystem.addEventListener('click', () => setTheme('system'));

      // reflect system changes when 'system' is active
      if (window.matchMedia) {
        const mq = window.matchMedia('(prefers-color-scheme: dark)');
        mq.addEventListener && mq.addEventListener('change', () => {
          const current = (() => { try { return localStorage.getItem(LS_KEY); } catch (e) { return null; }})();
          if (!current || current === 'system') applyTheme('system');
        });
      }
    })();
  </script>
</footer>
